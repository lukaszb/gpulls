#!/usr/bin/env python
# encoding: utf-8
import os
import prettytable
import requests
import sys
import termcolor


def get_token():
    path = os.path.expanduser('~/.github-key')
    try:
        return open(path).read().strip()
    except IOError:
        print("ERROR: Cannot read token from %r" % path)
        sys.exit(1)


MARK_COLOR = 'red'
TOKEN = get_token()
REPO = 'utest/apphance-on-premise'
USER = os.environ.get('GITHUB_USER', None)


class GithubClient(object):
    BASE_URL = 'https://api.github.com'

    def __init__(self, token=None):
        self.token = token

    def get(self, path):
        url = self.BASE_URL + path
        return requests.get(url, auth=(self.token, ''))


class PullRequest(object):

    #def __init__(self):
        #pass

    @classmethod
    def from_dict(cls, data):
        pull = cls()
        try:
            pull.assignee = data['assignee'].get('login')
        except:
            import ipdb; ipdb.set_trace()
        pull.url = data['_links']['html']['href']
        pull.number = data['number']
        pull.user = data['user']['login']
        pull.title = data['title']
        return pull


def marked(text):
    return termcolor.colored(text, color=MARK_COLOR)


def get_pull_row(pull):
    row = [pull.number, pull.user, pull.assignee, pull.title, pull.url]
    if pull.assignee and pull.assignee == USER:
        row = [marked(str(part)) for part in row]
    return row


def show_pulls(pulls):
    table = prettytable.PrettyTable(['ID', 'User', 'Assignee', 'Title', 'URL'])
    for pull in pulls:
        table.add_row(get_pull_row(pull))

    print table


client = GithubClient(TOKEN)


def main():
    response = client.get('/repos/%s/pulls' % REPO)
    data = response.json()
    pulls = [PullRequest.from_dict(pdata) for pdata in data]
    pulls.sort(key=lambda pull: pull.number)

    show_pulls(pulls)


if __name__ == '__main__':
    main()

